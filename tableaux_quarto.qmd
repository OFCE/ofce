---
title: "Les tableaux dans quartos"
subtitle: "- atelier de rentr√©e -"
author:
  - name: Paul, Anissa, et Xavier
author-footer: Paul, Anissa, et Xavier
institution: "OFCE - Lunch-S√©minaire"
date: today
lang: fr
code-fold: true
format: 
  pres-revealjs: 
    incremental: true   
    toc: false
  # slide-level niveau des slides √† prendre en compte (2 par d√©faut)
  # utiliser set_fontsize_reveal(chemin, 32) pour changer la taille des caract√®res
---

```{r, include=FALSE}
library(knitr)
library(tidyverse) 
library(showtext) 
library(ofce)
library(gt)

opts_chunk$set(
  echo = FALSE,
  warning = FALSE,
  message = FALSE,
  fig.pos="H", 
  out.extra="",
  dev="ragg_png",
  fig.showtext=TRUE,
  cache=FALSE)

showtext_opts(dpi=200)
showtext_auto()
tableau <- sample(iris)
donnees <- readRDS("data_sim.rds")

source("secret.R")


```

# Introduction

## Objectif de la session

<br>

-   Pr√©senter les outils disponibles pour la visualisation des donn√©es sous forme de tableau dans vos documents markdown

-   Montrer pas √† pas comment √† partir d'un tableau de donn√©es brutes, on obtient un tableau pr√©sentable dans un document

## Comment ne pas mettre un tableau ?

<br>

-   Toute mauvaise r√©ponse est la bienvenue

<br>

-   **La copie d'√©cran image coll√©e**
-   aussi connue sous la forme de "Je fais dans excel et je mets une image dans quarto"

<br>

-   Pourquoi ?

-   parce que nous valons tous mieux que √ßa.

-   ce n'est pas √©ditable dans le code, ce qui implique :

    -   Pas de tra√ßabilit√© des changements
    -   Des aller-retours entre plusieurs programmes
    -   Uniformisation des formats fastidieuses
    -   Peu de contr√¥le sur l'affichage

## Comment mettre un tableau : niveau 0

<br>

-   Par exemple si dans votre code de qmd il y a √ßa :

```{r}
#| eval: false
#| echo: true

head(iris)

```

-   Cela affichera √ßa :

```{r}
#| eval: true
#| echo: false

head(iris)

```

-   

    -   --\> Probl√®mes ?

## Comment faire un tableau sans jeu de donn√©es

## la syntaxe markdown

-   Ce format peut convenir pour les tableaux √† texte.

-   √ßa ressemble √† √ßa dans votre .qmd (en dehors d'un chunk)

-   convient pour des tableaux r√©dig√©s

-   la structure peut se faire automatiquement dans le mode `visual` en faisant `insert` \> `table`

```{r}
#| eval: false
#| echo: true

    |  Du texte | Du chiffre | Un emoji |
    |-----------|------------|----------|
    |  Or       | 16         | ü•á       |
    | Argent    | 26         | ü•à       |
    | Bronze    | 22         | ü•â       |

```

```         
| Du texte | Du chiffre | Un emoji |
|----------|------------|----------|
| Or       | 16         | ü•á       |
| Argent   | 26         | ü•à       |
| Bronze   | 22         | ü•â       |
```

-   Il est cependant difficile √† formater et √©diter.

## Comment mettre un *beau* tableau

### L'utilisation de packages R pour les tableaux format√©s

-   Cette m√©thode est √† priviligier pour tout tableau contenant extraites de base de donn√©es

-   Plusieurs packages existent: `huxtable`, `flextable`, `formattable`, `gt` etc..

-   **Le package privil√©gi√© pour l'ofce est `gt`.**

<br>

-   *On notera cependant que d'autres packages peuvent pr√©senter quelques fonctionnalit√©s suppl√©mentaires qui peuvent √™tre int√©ressantes pour certaines applications. Par exemple, le package `flextable` est tr√®s utile si le document de sortie est un `.docx` et est plus flexible sur la gestion des cellules merg√©es.*

## Le package `gt`

<br>

-   Le package gt est con√ßu pour g√©n√©rer des tableaux dans R avec une syntaxe simple et bien int√©gr√©e dans le `tidyverse`

-   Il permet de cr√©er des tableaux propres, lisibles et personnalisables pour les inclure dans un document `html` et `pdf`

-   `gt` offre une approche intuitive pour la stylisation des tableaux.

-   Les tableaux `gt` peuvent accueillir tout type de donn√©es (texte, chiffres) et les repr√©senter

## Installation

<br>

```{r}
#| echo: true
#| eval: false

## Le plus important 
pak::pak("gt")

# Compl√©ments
pak::pak("gtsummary")
pak::pak("gtExtras")


# Appel
library("gt")
library("gtsummary")
library("gtExtras")

```

-   ‚ö†Ô∏è ne pas confondre avec `gtable`

## Exemples de tableaux

### Exemple 1


```{r}

tbl_grav_nl <- bd_read("estmeaps") |>
  select(id, nom, obj, nbp, dl, p1, p2, p3, r2kl, r2kli) |>
  filter(str_detect(nom, "Grav")) |>
  mutate(id = 1:n()) |>
  gt() |>
  cols_label(id="", nom = "", obj="objectif",
             nbp = "p", dl = "DL",
             r2kl = md("R^2^~KLu~"), r2kli = md("R^2^~KLi~"),
             p1 = md("\u03B4"), p2 = md("\u03B1"), p3 = md("\u03B2")) |>
  tab_spanner(label = "Mod√®le", col=c(obj, nbp, dl)) |>
  tab_spanner(label = "Param√®tres", col=c(p1, p2, p3)) |>
  tab_spanner(label = "M√©triques", col=c(r2kl, r2kli)) |>
  fmt_markdown(c(p1, p2, p3, obj)) |>
  fmt_percent(columns = c(r2kl,r2kli), decimals = 1) |>
  sub_missing() |>
  cols_align(columns = -c(id,nom), align = "center") |>
  # tab_style(locations = cells_body(rows = seq(4, 11, by = 3)), style = cell_borders(sides="top")) |>
  tab_footnote(
    md("log(f~ij~)=\u03B1xlog(n~ij~)+\u03B2xlog(e~ij~)-\u03B4xlog(d~ij~)+a~i~ ; simple contrainte (en ligne)"),
    locations = cells_body(columns=nom, rows = str_detect(nom, "ligne"))) |>
  tab_footnote(
    md("log(f~ij~)=\u03B1xlog(n~ij~)+\u03B2xlog(e~ij~)-\u03B4xlog(d~ij~)+a~i~+b~j~ ; double contrainte (lignes et colonnes)"),
    locations = cells_body(columns=nom, rows = str_detect(nom, "l&c")))

bd_read("tbl_grav_nl")


```

------------------------------------------------------------------------

### Exemple 1 code

```{r}
#| echo: true
#| eval: false


tbl_grav_nl <- bd_read("estmeaps") |>
  
  # Preparation de la base de donn√©es
  select(id, nom, obj, nbp, dl, p1, p2, p3, r2kl, r2kli) |>
  filter(str_detect(nom, "Grav")) |>
  mutate(id = 1:n()) |>
  
  # Passage en format gt
  gt() |>
  
  # Formatage 
  cols_label(id="", nom = "", obj="objectif",
             nbp = "p", dl = "DL",
             r2kl = md("R^2^~KLu~"), r2kli = md("R^2^~KLi~"),
             p1 = md("\u03B4"), p2 = md("\u03B1"), p3 = md("\u03B2")) |>
  tab_spanner(label = "Mod√®le", col=c(obj, nbp, dl)) |>
  tab_spanner(label = "Param√®tres", col=c(p1, p2, p3)) |>
  tab_spanner(label = "M√©triques", col=c(r2kl, r2kli)) |>
  fmt_markdown(c(p1, p2, p3, obj)) |>
  fmt_percent(columns = c(r2kl,r2kli), decimals = 1) |>
  sub_missing() |>
  cols_align(columns = -c(id,nom), align = "center") |>
  # tab_style(locations = cells_body(rows = seq(4, 11, by = 3)), style = cell_borders(sides="top")) |>
  tab_footnote(
    md("log(f~ij~)=\u03B1xlog(n~ij~)+\u03B2xlog(e~ij~)-\u03B4xlog(d~ij~)+a~i~ ; simple contrainte (en ligne)"),
    locations = cells_body(columns=nom, rows = str_detect(nom, "ligne"))) |>
  tab_footnote(
    md("log(f~ij~)=\u03B1xlog(n~ij~)+\u03B2xlog(e~ij~)-\u03B4xlog(d~ij~)+a~i~+b~j~ ; double contrainte (lignes et colonnes)"),
    locations = cells_body(columns=nom, rows = str_detect(nom, "l&c")))

bd_read("tbl_grav_nl")


```

------------------------------------------------------------------------

### Exemple 2

![](Screenshot%202024-09-09%20at%2009.17.36.png)

## Organisation du format des tableaux `gt`

<br>

![](gt_parts_of_a_table.svg)


# Un *workflow* avec `gt`

## √âtapes basiques

<br>

-   obtention des donn√©es
-   pr√©paration des donn√©es
-   cr√©ation de la table `gt`
-   mise en forme simple
-   ajout de titres et notes de tableaux
-   fonctions esth√©tiques / th√®mes

## Etape 0 : Tout commence au `data.frame`

-   Dans un premier temps, il vous faut obtenir les donn√©es. C'est-√†-dire avoir `data.frame` dans votre environnement avec les donn√©es que vous souhaitez mettre dans votre tableaux

-   Rappel Pour charger les donn√©es, vous pouvez passer par exemple, par un `.rdata`, `.rds`, `.rda` , un fichier type csv ou excel

```{r}
#| echo: true
#| eval: false

# rdata ou rda 
load("data_sim.rdata")

# rds
donnees <- readRDS("data_sim.rds")

# csv
donnees <- read.csv("data_sim.csv")

```

-   Si j'essaie d'afficher ces donn√©es :

```{r}
print(donnees)
```

## Etape 1 : Les donn√©es brutes

<br>

-   Le premi√®re √©tape consiste √† effectuer les transformations n√©cessaires sur la base de donn√©es

-   Ici on veut repr√©senter les taux de croissance pour les ann√©es de 2020 √† 2025

```{r}
#| echo: true
#| 

donnees_simples <- donnees |> 
  group_by(variable,scenario) |> arrange(year) |> 
  mutate( value_gr = 100* (values / lag(values) - 1 )) |> 
  ungroup() |> 
  filter(year >= 2020 & year <= 2025) |> 
  select(year, variable, scenario, value_gr) 
  
donnees_simples

```

## Etape 2 : Pr√©paration des donn√©es passage √† `gt`

-   La deuxi√®me √©tape de pr√©paration consiste √† donner une forme finale au `data.frame` telle qu'on voudrait l'afficher

-   supprimer les colonnes inutiles, r√©ordonner les variables, on peut changer le format d'affichage (arrondis etc)

-   une bonne partie de ce formatage peut √™tre r√©alis√© apr√®s le passage √† `gt`

```{r}
#| echo: true

donnees_gt <- donnees_simples |> 
  mutate(value_gr = round(value_gr,1)) |> 
  select( variable, year,value_gr ) |> 
  
  pivot_wider(id_cols = c( "variable") , values_from = "value_gr" , names_from =  "year") |> 
  
  mutate(variable = fct_relevel(factor(c("GDP","CH","G","I","X","M"), levels = c("GDP","CH","G","I","X","M"))) ) |> 
  mutate(type = ifelse(variable %in% c("X","M"), "Commerce ext√©rieur", "Demande int√©rieure" ),
         type = ifelse(variable %in% c("GDP"), " ", type)
         )


donnees_gt

```

## Etape 3 : Mise en forme basique `gt`

-   La table est pr√™te √† etre mise au format `gt`

```{r}
#| echo: true

gt(donnees_gt)
```

## Etape 3.1 : Les groupes

-   Pour ajouter les lignes "groupes"

```{r}
#| echo: true
gt(donnees_gt |> group_by(type))  
```

## Etape 4 : En-t√™tes et Notes de bas de page

-   Ajout d'en-t√™te

```{r}
#| echo: true
gt(donnees_gt |> group_by(type))  |> 
  tab_header(
    title = "R√©sultats macro√©conomiques",
    subtitle = "Sc√©nario du bouclier tarifaire"
  ) |> 
    cols_label(variable = "") |> 
  tab_spanner(label = "BT", col=c(`2021`, `2022`, `2023`)) |> 
  tab_footnote("Sources : Simulations ThreeME")  |> 
  tab_footnote(
    md("Bouclier gaz uniquement"),
    locations = cells_column_labels(columns=`2021`) )


```

## Etape 5 : Quelques fonctions esth√©tiques

```{r}
#| echo: true


gt(donnees_gt |> group_by(type))  |> 
  
  tab_header(
    title = "R√©sultats macro√©conomiques",
    subtitle = "Sc√©nario du bouclier tarifaire"
  ) |> 
    cols_label(variable = "") |> 
  tab_spanner(label = "BT", col=c(`2021`, `2022`, `2023`)) |> 
  tab_footnote("Sources : Simulations ThreeME")  |> 
  tab_footnote(
    md("Bouclier gaz uniquement"),
    locations = cells_column_labels(columns=`2021`) ) |> 
  
  tab_options(table.background.color = "lightyellow")
  
  


```

## Etape 5.1 : Les th√®mes

```{r}
#| echo: true


gt(donnees_gt |> group_by(type))  |> 
  
  tab_header(
    title = "R√©sultats macro√©conomiques",
    subtitle = "Sc√©nario du bouclier tarifaire"
  ) |> 
    cols_label(variable = "") |> 
  tab_spanner(label = "BT", col=c(`2021`, `2022`, `2023`)) |> 
  tab_footnote("Sources : Simulations ThreeME")  |> 
  tab_footnote(
    md("Bouclier gaz uniquement"),
    locations = cells_column_labels(columns=`2021`) ) |> 
  
 theme.gt_ofce()
  
  


```

## Etape bonus : r√©f√©rences crois√©es dans votre qmd

Tout comme pour une figure dans un document quarto, les tableaux dans votre document peuvent √™tre r√©f√©renc√©s :

```{r}
#| eval: false
#| echo: true

##| label: tbl-macro
##| tbl-cap: R√©sultats simulation 1
##| 
```

```{r}
#| echo: false
#| label: tbl-macro
#| tbl-cap: R√©sultats simulation 1



gt(donnees_gt |> group_by(type))  |> 
  
  tab_header(
    title = "R√©sultats macro√©conomiques",
    subtitle = "Sc√©nario du bouclier tarifaire"
  ) |> 
    cols_label(variable = "") |> 
  tab_spanner(label = "BT", col=c(`2021`, `2022`, `2023`)) |> 
  tab_footnote("Sources : Simulations ThreeME")  |> 
  tab_footnote(
    md("Bouclier gaz uniquement"),
    locations = cells_column_labels(columns=`2021`) ) |> 
  
 theme.gt_ofce()
  

```

Dans le tableau @tbl-macro, onvoit que...

## Etape super-bonus : les fonctionnalit√©s avanc√©es

<br>

-   Le package `gt` est riche en fonctionnalit√©s.

    -   La package `gtExtras` vient compl√©menter `gt` en ajoutant des options de visualisations telles que les mini graphiques dans les tableaux

    -   On peut g√©n√©rer des lignes de r√©sum√© (type ligne "total" ou "moyenne" ) automatiquement par la fonction `summary_rows()`

    -   Des packages avec des tableaux `gt` pr√©-programm√©s pour exploiter avec des tableaux sp√©cifiques type regression

# Conclusion

<br>

- Faites vos premiers essais !

- Voir la doc du package sur https://gt.rstudio.com/

- En cas de besoin : demandez !
