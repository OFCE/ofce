---
title: "Faire un graphique"
code-annotations: hover
vignette: >
  %\VignetteIndexEntry{"Faire un graphique"}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
library(ofce)
```

Il y a au moins trois m√©thodes pour mettre un graphique dans dans un document quarto : `{ggplot2}`, copier-coller, fichier image.

## ggplot2

La fa√ßon pr√©f√©r√©e de faire un graphique est `{ggplot2}`. Elle est la plus flexible, permet d'avoir une source unique, peut √™tre facilement modifi√©e (uniformisation, traduction, correction, raffinements) et s'int√®gre parfaitement en html et en pdf.

Avec un faible co√ªt on peut rendre le graphique interactif (avec `{plotly}` ou `{ggiraph}`).

Un graphique `ggplot` doit contenir une couche (layer) `theme_ofce()` et limiter au maximum les d√©finitions de taille (par exemple de police de caract√®re). Ces d√©finitions doivent √™tre faites de fa√ßon globale pour assurer l'homog√©n√©it√©. **Il est important de ne pas d√©finir la taille de la figure, √ßa risque de produire des images avec des caract√®res trop petits**.

Pour changer les dimensions d'un graphique, il faut utiliser[^1] `#| fig-asp : x` ou `x` est le ratio entre la hauteur et la longueur. 0.61 est la valeur par d√©faut et correspond au nombre d'or soit entre 16/9 et 16/10. Pour des graphiques particuliers (par exemple deux graphiques empil√©s ou une carte) on peut mettre 1 (format carr√©) ou 1.4 quand on veut prendre toute la page A4.

[^1]: donc on n'utilise pas `#| fig-width` ou `fig-height`.

Le code d'un graphique `{ggplot2}` :

``` r
#| label: fig-tauxapp
#| fig-cap: Taux de taxation apparent sur le patrimoine des m√©nages
#| fig-asp: 0.61
# pas besoin d'en mettre plus, echo, message, warning sont d√©j√† d√©finis

data <- readxl::read_xlsx(
  "analyses/Tables/patrimoine menages.v2.xlsx",
  sheet = "tapp") # <1>

names(data) <- c("date", "vn", "pib")
data <- data |> mutate(date = lubridate::ym(str_c(date, "-01"))) |> 
  pivot_longer(cols  = c(vn, pib)) |> 
  mutate(name = factor(name, c("vn", "pib"),
                       c("En % de la valeur nette", "En % du PIB")))
                       
# un ggplot et ses diff√©rentes couches
ggplot(data) + 
  aes(x = date, y = value, group = name, col = name, fill = name) +
  geom_line(linewidth = 1) +
  geom_point(shape = 21, col = "white", size = 2) +
  theme_ofce(legend.position = "bottom") + # <2>
  scale_x_date(date_breaks = "2 years", date_labels = "%Y", 
               date_minor_breaks = "year") + # <3>
  PrettyCols::scale_color_pretty_d(name = NULL, palette = "Summer") + # <4>
  PrettyCols::scale_fill_pretty_d(name = NULL, palette = "Summer") +
  ylab("Taux apparent") + xlab(NULL) +
  scae_y_continuous(labels = \(x) str_c(x, "%")) +
  labs(caption =
         "La fiscalit√© sur le patrimoine est compos√©e ici de la taxe fonci√®re pay√©e par les m√©nages, <br>
       des droits d'enregistrement sur les transactions immobili√®res, des droits de mutation sur les successions et les donations et de l'Imp√¥t sur la Fortune Immobili√®re (ex-ISF)<br>
       *Sources* : Insee, calculs OFCE") # <5>
```
1. Les donn√©es sont dans excel -- elles pourraient venir de R ou d'ailleurs. La feuille `tapp` est formatt√©e simplement
2. Utilisez le `theme_ofce` pour uniformiser l'aspect des graphiques
3. `scale_date` est important lorsqu'on pr√©sente des donn√©es temporelles, il faut penser √† convertir les dates en dates (as.Date() ou lubridate::ymd() et consorts), m√™me si les dates ne sont que des ann√©es.
4. Le choix des couleurs est tjrs d√©licat, Paul Malliet est un ma√Ætre en la mati√®re, uniformiser ses choix de couleurs le long d'un document c'est bien,  donner une signification √† ses couleurs c'est mieux, quand en plus c'est harmonieux, c'est PM (plus que mieux ou Paul Malliet)
5. Les sources -- notez qu'on ne met pas de titre au graphique (voir la section r√©f√©rences crois√©es)

## Copier-coller

On peut copier coller un graphique (de word, d'excel, d'ailleurs) dans le mode visuel de RStudio. √áa marche mais c'est pas le mieux. Quand on copie colle, on fait quelque chose qui ressemble √† l'option qui suit.

## Image au format png/jpeg/jpg/svg

On peut enregistrer une image (au format que l'on veut, `quarto` accepte pas mal d'options, dont les plus courantes) et l'ins√©rer dans le texte. Il y a deux fa√ßon de faire soit en `markdown` (dans le qmd, comme un lien ou autre chose), soit en utilisant `include_graphics`. L'int√©r√™t par rapport au copier-coller est que si on change le fichier qui contient l'image, √† chaque *render* du document, la bonne (la derni√®re version) image sera utilis√©e. Si on utilise des images venant de `eviews` üíÄ ou `stata` üòµ, c'est la meilleure m√©thode.

``` md
[Titre de la figure](rep/fig.png)
```

Le **r√©pertoire est toujours relatif**.

*Jamais de chemin absolu* comme "`c:/user/machin/montravail/monrepo/monimage.png`" parce que √ßa ne marchera pas sur un autre ordinateur et en plus `github` ne copiera pas l'image) et par celui qui contient le `.qmd`. Il est toujours possible de mettre les images dans un sous dossier.

Plus c'est simple et clair, mieux c'est (i.e. gardez les noms courts, explicites, pas de majuscules, bien rang√©s, conservateurs dans l'utilisation des caract√®res (**pas d'accents, pas de blancs, pas de symboles sp√©ciaux**). Donc `donnees/img.png` ou `donnees/graphique 1a5.png` ne sont pas des bons noms. Mais `figures/revenu.png` ou `figures/pib_par_tete.png` sont mieux.

```r
#| label fig-pib2008_2024
#| fig-cap: PIB entre 2008 et 2024

knitr::include_graphics("pib2008_2024.png")
```

Notez la coh√©rence des id, nom et titre.

## Les autres packages

On peut faire des graphiques avec d'autres packages dans R, voire m√™me utiliser base R. Nous ne recommandons pas cette voie, parce qu'elle rend tr√®s difficile l'harmonisation des graphiques et les fonctionnalit√©s avanc√©es. Parfois, cependant, il n'y a pas d'autres solutions.
