% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source_data.R
\name{source_data}
\alias{source_data}
\title{source_data : exécute le code et cache les données}
\usage{
source_data(
  name,
  relative = "project",
  data_rep = "_data",
  hash = TRUE,
  lapse = "never",
  force_exec = Sys.getenv("FORCE_EXEC"),
  prevent_exec = Sys.getenv("PREVENT_EXEC"),
  metadata = FALSE
)
}
\arguments{
\item{name}{(character) le chemin vers le code à exécuter (sans extension .r ou .R), ce chemin doit être relatif au projet (voir relative), bien que une recherche sera effectuée}

\item{relative}{(character) Si "projet" le chemin est supposé relatif au projet, sinon le chemin sera dans le répertoire de travail (attention il peut changer)}

\item{data_rep}{(character) Le chemin du dossier dans lequel sont enregistré les caches (défaut _data)}

\item{hash}{(boléen) Si TRUE (défaut) un changement dans le code déclenche son exécution}

\item{lapse}{(character) peut être "never" (défaut) "x hours", "x days", "x weeks", "x months", "x quarters", "x years"}

\item{force_exec}{(boléen) Si TRUE alors le code est exécuté ($FORCE_EXEC par défaut)}

\item{prevent_exec}{(boléen) Si TRUE alors le code n'est pas exécuté ($PREVENT_EXEC par défaut), ce flag est prioritaire sur les autres, sauf si il n'y a pas de données en cache}

\item{metadata}{(boléen) Si TRUE (FALSE par défaut) la fonction retourne une liste avec des métadonnées et le champ data qui contient les données elles même}
}
\value{
data (list ou ce que le code retourne)
}
\description{
Cette fonction s'utilise presque comme source et permet d'en accélérer l'exécution par le cache des données.
}
\details{
Le code est exécuté (dans un environnement local) et le résultat est mis en cache. Il est important que le code se termine par un return(les_données).
Si return() n'est pas présent dans le code, il n'est pas exécuté et un message d'erreur est envoyé ("NULL" est retourné).
le code est exécuté avec un contrôle d'erreur, donc si il bloque, "NULL" est renvoyé, mais sans erreur ni arrêt.
les appels suivants seront plus rapides et sans erreur.

Une modification du code est détectée et déclenche l'éxécution

Suivant le paramètre lapse on peut déclencher une exécution péridique. Par exemple, pour ne pas rater une MAJ, on peut mettre lapse = "1 day" ou "day" et une fois par jour le code sera exécuté.
Cela permet d'éviter une exécution à chaque rendu.

On peut bloquer l'exécution en renseignant la variable d'environnement "PREVENT_EXEC" pas Sys.setenv(PREVENT_EXEC = "TRUE") ou dans .Renviron.
Ce blocage est prioritaire sur tous les autres critères (sauf en cas d'absence de cache).

Des métadonnées peuvent être renvoyées (paramètre metadata) avec la date d'exécution ($date), le temps d'exécution ($timing),
la taille des données ($size), le chemin de la source ($where), le hash du source ($hash) et bine sûr les données ($data)
}
