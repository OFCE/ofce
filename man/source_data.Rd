% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source_data.R
\name{source_data}
\alias{source_data}
\title{source_data : exécute le code et cache les données}
\usage{
source_data(
  name,
  args = list(),
  relative = getOption("ofce.source_data.relative"),
  hash = getOption("ofce.source_data.hash"),
  track = list(),
  lapse = getOption("ofce.source_data.lapse"),
  force_exec = getOption("ofce.source_data.force_exec"),
  prevent_exec = getOption("ofce.source_data.prevent_exec"),
  metadata = getOption("ofce.source_data.metadata"),
  wd = getOption("ofce.source_data.wd"),
  cache_rep = find_cache_rep(),
  root = NULL,
  quiet = TRUE,
  nocache = FALSE
)
}
\arguments{
\item{name}{(character) le chemin vers le code à exécuter (sans extension .r ou .R), ce chemin doit être relatif au projet (voir relative), bien que une recherche sera effectuée}

\item{args}{(list) une liste d'arguments que l'on peut utliser dans source (args$xxx)}

\item{relative}{(character) Si "projet" le chemin du source est supposé relatif au projet, sinon le chemin sera dans le répertoire de travail (attention il peut changer)}

\item{hash}{(boléen) Si TRUE (défaut) un changement dans le code déclenche son exécution}

\item{track}{(list) une liste de fichiers (suivant la même règle que src pour les trouver) qui déclenchent l'exécution.}

\item{lapse}{(character) peut être "never" (défaut) "x hours", "x days", "x weeks", "x months", "x quarters", "x years"}

\item{force_exec}{(boléen) Si TRUE alors le code est exécuté ($FORCE_EXEC par défaut)}

\item{prevent_exec}{(boléen) Si TRUE alors le code n'est pas exécuté ($PREVENT_EXEC par défaut), ce flag est prioritaire sur les autres, sauf si il n'y a pas de données en cache}

\item{metadata}{(boléen) Si TRUE (FALSE par défaut) la fonction retourne une liste avec des métadonnées et le champ data qui contient les données elles même}

\item{wd}{(character) si 'project' assure que le wd est le root du project, si 'file' (défaut) c'est le fichier sourcé qui est le wd, si "qmd", c'est le qmd qui appelle}

\item{cache_rep}{(character) Le chemin du dossier dans lequel sont enregistré les caches (défaut _data)}

\item{quiet}{(boléen) pas de messages}

\item{nocache}{(boléen) n'enregistre pas le cache même si nécessaire}
}
\value{
data (list ou ce que le code retourne)
}
\description{
Cette fonction s'utilise presque comme source et permet d'en accélérer l'exécution par le cache des données.
}
\details{
Le code est exécuté (dans un environnement local) et le résultat est mis en cache. Il est important que le code se termine par un return(les_données).
Si return() n'est pas présent dans le code, il n'est pas exécuté et un message d'erreur est envoyé ("NULL" est retourné).
le code est exécuté avec un contrôle d'erreur, donc si il bloque, "NULL" est renvoyé, mais sans erreur ni arrêt.
les appels suivants seront plus rapides et sans erreur.

Une modification du code est détectée et déclenche l'éxécution

Suivant le paramètre lapse on peut déclencher une exécution périodique.
Par exemple, pour ne pas rater une MAJ, on peut mettre \code{lapse = "1 day"} ou \code{"day"} et une fois par jour le code sera exécuté.
Cela permet d'éviter une exécution à chaque rendu.

On peut bloquer l'exécution en renseignant la variable d'environnement \code{PREVENT_EXEC} pas \code{Sys.setenv(PREVENT_EXEC = "TRUE")} ou dans \code{.Renviron}.
Ce blocage est prioritaire sur tous les autres critères (sauf en cas d'absence de cache).

Des métadonnées peuvent être renvoyées (paramètre metadata) avec la date d'exécution ($date), le temps d'exécution ($timing),
la taille des données (\verb{$size}), le chemin de la source (\verb{$where}), le hash du source (\verb{$hash_src}) et bien sûr les données ($data)

Les valeurs par défaut peuvent être modifiées simplement par options(ofce.source_data.hash = FALSE) par exemple et persiste pendant une session.
Typiquement cela peut être mis dans rinit.r (et donc être exécuté par \code{ofce::init_qmd()})

Le paramètre \code{wd} perment de spécifier le répertoire d'exécution du source.
Si il est mis à \code{"file"}, les appels à l'intérieur du code source, comme par exemple un save ou un load seront compris dans le répertoire où se trouve le fichier source.
L'intérêt est que le code peut avoir des éléments persistants, locaux
L'alternative est d'utiliser \code{wd="project"} auquel cas, le rpéertoire d'exécution sera independant de l'endroit où est appelé le code source.
Les éléments persistants peuvent alors être dasn un endroit commun et le code peut appeler des éléments persistants d'autres codes sources.
Toute autre valeur pour wd laisse le working directory inchnagé et donc dépendant du contexte d'exécution. Pour ceux qui aiment l'incertitude.

En donnant des fichers à suivre par \code{track}, on peut déclencher l'exécution du source.

\code{unfreeze} permet d'invalider le cache de quarto et de déclencher l'exécution (expérimental)
}
\seealso{
Other source_data: 
\code{\link{clear_source_cache}()},
\code{\link{set_cache_rep}()},
\code{\link{source_data_refresh}()},
\code{\link{source_data_status}()}
}
\concept{source_data}
